Odoo language notation:

atributos de campos genéricos:
help - permite descrever a utilidade do campo;
required - torna o campo como requisito de ter uma resposta para que o objeto seja criado;
invisible - o campo fica invisível para o usuário;
readonly - o campo fica apenas para visualização;
default - valores inseridos dentro desse atributo se tornarão o padrão do campo;

Fields:

char:
definition - permite colocar palavras como resultado de um campo;
specifics attibutes:
size: delimita a quantidade de caracteres que o campo irá possuir;
trim: permite que o campo tenha ou não espaços.

boolean:
definition - permite colocar valores lógicos no campo.
specifics attibutes - nenhum.

float:
definition - permite colocar valores flutuantes no campo.
specifics attibutes:
digits: define quais vão ser os digitos decimais e o total.

integer:
definition - permite atribuir valores inteiros para o campo.
specifics attibutes: nenhum.

text:
definition - permite colocar palavras como resultado de um campo, porém com uma capacidade maior;
specifics attibutes:
trim: permite que o campo tenha ou não espaços.

datetime:
definition - permite colocar um campo com data e hora;
specifics attibutes:

date:
definition - permite colocar um campo com data;
specifics attibutes:

selection:
definition - permite colocar um campo com key e value;
specifics attibutes:

binary:
definition - permite colocar como arquivo ou imagens;
specifics attibutes: na view, o atributo filename.

image:
definition - permite colocar um campo com imagem;
specifics attibutes: 
max_width e max_height;
verify_resolution.

hmtl:
definition - permite colocar um com texto, porém outras ferramentas;
specifics attibutes:

Many2one:
definition - permite criar uma foreign key de outro model;
specifics attibutes:

Operators in domain field:

Examples:

[('name', 'like', 'dog')]

This will find recods with name 'dog', 'dogs', 'bulldog', ... but not 'Dog'.

[('name', '=like', 'dog')]

This will find records with name 'dog' (it's almost exactly like the '=' operator).

[('name', 'ilike', 'dog')]

This is the most universal search. It will find records with name 'dog', 'DOGS', 'Bulldog', etc..

['name', '=ilike', 'dog')]

This will find records with name 'dog', 'DOG', 'Dog', 'DOg', DoG', 'dOG', 'doG' and 'dOg'.


ORM METHODS:



BROWSE()

se id único:
self.env("model_name").browse(1)

se lista de ids
self.env("model_name").browse([1,2,3])
console:
objects ([1,2,3])

stud_obj = self.env("model_name")
for stud in stud_obj.browse([1,2,3]):
	stud
console: 
object(1,)
object(2,)
object(3,)

stud_obj = self.env("model_name")
for stud in stud_obj.browse([1,2,3,4]):
	if stud.exists():
		stud
	else:
		print(stud,"Not Found")
console: 
stud(1,)
stud(2,)
stud(3,)
stud(4,) Not Found

Dessa forma nós possuimos acesso a um ou múltiplos objetos.




SEARCH()

Nos permite utilizar operações de banco de dados no back end.


The difference between browse and search methods, it is when browsing a object you only pass the id or ids, and when searching you give the parameters of it.




SEARCH_COUNT()

first example:

stud_obj = self.env("student_school")
stud_obj.search_count([])

it will returns all the active records.

second example:

stud_obj = self.env("student_school")
stud_obj.search_count([('active','=',False)])

it will returns all the inactive records.




READ()

it will read the list or the single record that you are aiming.

example:

stud_obj = self.env("student_school")
stud_list = stud_obj.search([])
console: 1,2,3,4,5,6
stud_list.read([]) or stud_list.read(['id','name','bdate'])
it will returns a json data related to the previous instruction.




EXISTS()

it will verify if exists the passed record.

example:

stud_obj = self.env("student_school")
stud_list = stud_obj.browse([1,2,3,4,5])
for stud in stud_list:
	if stud.exists():
		stud.id
		stud.name
	else:
		print(stud,"Not Found")



		
ENSURE_ONE()

def method(self):
	self.ensure_one()

ensures that only have one record.

stud_obj = self.env("student_school")
stud_list = stud_obj.search([])
stud_list.method()
console: error, expected singleton.

for stud in stud_list: 
	stud.method()

console: ok.




GET_METADATA()

show us the record metadata, similar to read() function, but it gives xml_id information.



FIELDS_GET()

it will gives us a dictionary related to object fields.



FIELDS_VIEW_GET()

you can add some labels in form trought model.



NAME_GET()

it let us to change the record name that is displayed in many2one field.



_NAME_SEARCH()

@api.model
def name_search(self, name, args=None, operator='ilike', limit=100):
	
	args = args or []
	
	if name:
		records = self.search(['|', '|', ('name', operator, name), ('email', operator, name), ('school_number', operator, name)])
		return records.name_get()
	return self.search([('name', operator, name)]+args, limit=limit).name_get()
		or
	return super(SchoolProfile, self).name_search(name=name, args=args, operator=operator, limit=limit)
		

@api.model
def _name_search(self, name, args=None, operator='ilike', limit=100, name_get_uid=None):
	
	args = args or []
	domain = []
	
	if name:
		domain = (['|', '|', ('name', operator, name), ('email', operator, name), ('school_number', operator, name)])
		return records.name_get()
	school_ids = self.search(domain+args, limit=limit)
	return school_ids(name_get_uid).name_get()
	
the difference between the two methods it is the construction of it self.



filtered method:

stud_obj = self.env("student.school")
stud_list = stud_obj.search([])
(1,2,3,4,5,6,7,8,9)

stud_ids = stud_list.ids

we want now to get just the objects that have the field total_fees >= 1000

stud_list.filtered(lambda lm: lm.total_fees >= 1000)

it allows us to check all the record set whithout hitting the database, doing so, a much faster process.


BAD WAY OF DOING THIS:
stud_obj = self.env("student_school")
stud_obj = stud_list.search([('total_fees','>=', 1000), ('id', 'in', stud_ids)])


on doing this, you will hit one more query to data base, because of search method. Using filtered method you will verify focusing on the given record set.

 
 
 
Difference between search and _search method:

search:
stud_obj = self.env("student_school")
stud_list = stud_obj.search([])
stud_list
return: 
(1,2,3,4,5,6,7,8,9)

_search:
stud_obj = self.env("student_school")
stud_list = stud_obj._search([])
stud_list
return: 
[1,2,3,4,5,6,7,8,9]

search method returns a list of record set, and _search method returns a list of ids.





mapped function:

stud_obj = self.env("student_school")
stud_list = stud_obj.search([])

stud_list.mapped(lambda lm: lm.field)
return:
it will return a set of record or just one record that have the field specified previously.

BAD WAY OF DOING THIS:
stud_obj = self.env("student_school")
stud_obj.search([('id', 'in', stud_list.field.ids)])


on doing this, you will hit one more query to data base, because of search method. Using mapped method you will verify focusing on the given record set.




sorted method:

stud_obj = self.env("student_school")
stud_list = stud_obj.search([])

stud_list.sorted(key='id')
(3,4,5,6,7,8,9,10)

stud_list.sorted(key='school_id')
(5,8,9,3,4,6,7,10)

or

stud_list.sorted(lambda lm: lm.id)      and        stud_list.sorted(lambda lm: lm.id, reverse=True)
(3,4,5,6,7,8,9,10						           (10,9,8,7,6,5,4,3)



stud_list.sorted(lambda lm: lm.school_id)
(5,8,9,3,4,6,7,10)


BAD WAY OF DOING THIS:
stud_obj = self.env("student_school")
stud_obj.search([('id', 'in', stud_list)], order='id desc')

on doing this, you will hit one more query to data base, because of search method. Using sorted method you will verify focusing on the given record set.



